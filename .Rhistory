*Exercise:* using the function `mean` seen above and coefficient by coefficient operations, compute the variance of the vector `vect_unif`.
```{r}
# Put your code here!
var<- mean((vect_unif-mean(vect_unif))^2)
var(vect_unif)
Compare your result with what you get using the function `var`.
```{r}
var(vect_unif)
```
## 2. Histogram
We plot two histograms, with 20 bins each, of the sample `vect_unif`. What is the difference between the two pictures?
```{r}
hist(vect_unif,breaks=20,freq=T)
```
```{r}
hist(vect_unif,breaks=20,freq=F)
```
# III. Functions and programming commands
Here are three functions, which use the commands `if`, `for`, and `while`.
What do they do?
```{r}
FirstMysteryFunction = function(p) { # p must be between 0 and 1
U = runif(1)
if (U <= p) {
return(1)
} else {
return(0)
}
}
X=FirstMysteryFunction(.5)
X
```
```{r}
SecondMysteryFunction = function(n,p) { # n must be an integer, p must be between 0 and 1
s = 0
for (i in 1:n) {
s = s + FirstMysteryFunction(p)
}
return(s)
}
S=SecondMysteryFunction(10,.5)
S
```
```{r}
ThirdMysteryFunction = function(p) { # p must be between 0 (strictly) and 1
i = 1
while(FirstMysteryFunction(p)==0) {
i=i+1
}
return(i)
}
T=ThirdMysteryFunction(.01)
T
```
# IV. Convergences
## 1. Law of Large Numbers
Let $(X_i)_{i \geq 1}$ be a sequence of iid $\mathcal{N}(0,1)$ random variables, with parameter $1$. We plot the curve of the function $n \mapsto \bar{X}_n$ for $n \in \{1, \ldots, 5000\}$, superposed with the horizontal line with height $y=0$.
```{r}
N = 5000 # Size of the sample
x = rnorm(N) # Sample of N standard Gaussian variables
xbar = c() # The vector xbar will eventually contain the values of \bar{X}_n
for (n in 1:N) {
xbar[n] = mean(x[1:n])
}
plot(1:N,xbar,type="l")
abline(h=0,col="red")
```
*Exercise:* Modify the code to plot the same graph with Cauchy random variables. What do you observe?
```{r}
# Put your code here!
N = 5000 # Size of the sample
x = rcauchy(N) # Sample of N standard Gaussian variables
xbar = c() # The vector xbar will eventually contain the values of \bar{X}_n
for (n in 1:N) {
xbar[n] = mean(x[1:n])
}
plot(1:N,xbar,type="l")
abline(h=0,col="red")
## 2. Central Limit Theorem
Let $Z_n$ be the random variable defined by $$Z_n = \sqrt{n}\left(\bar{X}_n - 1\right),$$ where $(X_i)_{1 \leq i \leq n}$ is a sequence of Exponential random variables with parameter $1$.
*Exercise:* Create a sample of $M=5000$ independent copies of $Z_n$, and plot its histogram superposed with the density of the standard Gaussian distribution. Compare the graphs obtained for $n=10$ and $n=100$. What do you conclude?
```{r}
# Put your code here!
M = 5000 # Size of the sample
x = rexp(N) # Sample of N standard Gaussian variables
xbar = c() # The vector xbar will eventually contain the values of \bar{X}_n
for (n in 1:N) {
xbar[n] = mean(x[1:n])
}
Z10=sqrt(10)*(xbar-1)
Z100=sqrt(100)*(xbar-1)
xd<-seq(-4,+4,by=0.02)
hist(vect_unif,breaks=20,freq=F)
curve(dnorm(xd), add=TRUE)
a<-1
print(paste("a is equal to",a,"and b is equal to",b,"so a+b is equal to",a+b))
hist(vect_unif,breaks=20,freq=F)
curve(dnorm,xd, add=TRUE)
N = 5000 # Size of the sample
x = rnorm(N) # Sample of N standard Gaussian variables
xbar = c() # The vector xbar will eventually contain the values of \bar{X}_n
for (n in 1:N) {
xbar[n] = mean(x[1:n])
}
plot(1:N,xbar,type="l")
abline(h=0,col="red")
# Put your code here!
N = 5000 # Size of the sample
x = rcauchy(N) # Sample of N standard Gaussian variables
xbar = c() # The vector xbar will eventually contain the values of \bar{X}_n
for (n in 1:N) {
xbar[n] = mean(x[1:n])
}
plot(1:N,xbar,type="l")
abline(h=0,col="red")
## 2. Central Limit Theorem
?dnorm
plot(function(x) dnorm(x), -60, 50, main = " Normal density ")
?student
?dt
line(function(x) dt(x,1), -60, 50, main = " t(1)")
line(function(x) dt(x,1), -60, 50, main = " t1")
plot(function(x) dnorm(x), -60, 50, main = " Normal density ")
line(function(x) dt(x,1), -60, 50, main = " t1")
line(function(x) dt(x,1), -60, 50)
plot(function(x) dnorm(x), -60, 50, main = " Normal density ")
line(function(x) dt(x,1), -60, 50)
plot(function(x) dnorm(x), -60, 50, main = " Normal density ")
line(function(x) dt(x,df=1), -60, 50)
?dnorm
plot(function(x) dnorm(x), -60, 50, main = " Normal density ")
lines(function(x) dt(x,df=1), -60, 50)
x<- seq(-60,50)
x<- seq(-60,50, 1000)
x<- seq(-60,50, length= 1000)
y= dnorm(x)
plot(x,y)
w= dt(x)
w= dt(x, df =1)
lines(x,w)
w2=dt (x, df = 5)
lines(x,wé, colors())
?lines
lines(x,wé, col = 4)
lines(x,w2, col = 4)
w3 = dt(x, df =10)
lines(x,w3, col = 5)
x<- seq(-20,20, length= 1000)
y= dnorm(x)
w= dt(x, df =1)
w2=dt (x, df = 5)
w3 = dt(x, df =10)
plot(x,y)
lines(x,w)
lines(x,w2, col = 4)
lines(x,w3, col = 5)
?dnorm
x<- seq(-10,10, length= 1000)
y= dnorm(x)
w= dt(x, df =1)
w2=dt (x, df = 5)
w3 = dt(x, df =10)
plot(x,y)
lines(x,w)
lines(x,w2, col = 4)
lines(x,w3, col = 8)
?dnorm
x<- seq(-5,5, length= 1000)
y= dnorm(x)
w= dt(x, df =1)
w2=dt (x, df = 5)
w3 = dt(x, df =10)
plot(x,y)
lines(x,w)
lines(x,w2, col = 4)
lines(x,w3, col = 8)
?lines
rm(list=ls())
n = 30
mu = 0
sigma = 1
x = rnorm(n,mean=mu,sd=sigma)
mu_0 = .2
p_val = 2*(1-pnorm(sqrt(n/sigma^2)*abs(mean(x)-mu_0)))
p_val
?pchisq
sigma_0 = .8
alpha = 0.05
q_alpha = qchisq(p = 1-alpha, df = n-1)
Value_chi_2 = 1/sigma_0^2*var(x)
# Your code here
mu_0 = .01
# Two-sided Z-test for H_0 = {\mu = \mu_0}, H_1 = {\mu \not= \mu_0}
t_test_1 = t.test(x, alternative="two.sided", mu=mu_0)
t_test_1
print(t_test_1$p.value)
# H_1 = {\mu < \mu_0}
t_test_2 = t.test(x, alternative="less", mu=mu_0)
print(t_test_2$p.value)
# H_1 = {\mu > \mu_0}
t_test_3 = t.test(x, alternative="greater", mu=mu_0)
print(t_test_3$p.value)
# First funny identity
t_test_2$p.value / t_test_1$p.value
# Second funny identity
t_test_2$p.value + t_test_3$p.value
heart_rates = c(80,74,73,72,78,75,70,74,69)
hours_of_sleep = c(7.2,8.7,5.4,6.1,5.6,6.7,5.9,6.3,7,4.2)
n_s = 15
mu_s = -.1
x_s = rnorm(n_s,mu_s,sigma)
f_test = var.test(x,x_s)
f_test
t_test_two_samples = t.test(x,x_s,alternative="two.sided",var.equal=T)
t_test_two_samples
grades_imi = c(8.5,10,10,10,11,11.5,11.5,12,12,12,
12,12.5,12.5,12.5,12.5,13,13,13,13,13,
13,13,13,13.5,14,14,14,14,14,14,
14.5,14.5,14.5,15,15,15.5,15.5,15.5,15.5,15.5,
16,16,16,16,16,16,16.5,16.5,16.5,16.5,
18.5,18.5,19,19)
grades_segf = c(3.5,10,10,10.5,10.5,11,11,11,11.5,11.5,
12.5,12.5,13.5,13.5,13.5,14,14.5,15,15.5,15.5,
15.5,16,16.5,17,17,17.5)
print(mean(grades_imi))
print(mean(grades_segf))
print(sd(grades_imi))
print(sd(grades_segf))
# Your code here
# Your code here
# Your code here
# Load the mtcars dataset
data(mtcars)
mtcars
# Fit linear regression model
model = lm(qsec ~ mpg + hp, data = mtcars)
# Summary of the regression model
summary(model)
heart_rates = c(80,74,73,72,78,75,70,74,69)
pvalue_heart = 1-pnorm(mean(heart_rates), mean = 71, sd = 4)
heart_rates = c(80,74,73,72,78,75,70,74,69)
pvalue_heart = 1-pnorm(mean(heart_rates), mean = 71, sd = 4/9)
hours_of_sleep = c(7.2,8.7,5.4,6.1,5.6,6.7,5.9,6.3,7,4.2)
mu_0_sleep = 6
# Two-sided Z-test for H_0 = {\mu = \mu_0}, H_1 = {\mu \not= \mu_0}
t_test_1 = t.test(hours_of_sleep, alternative="two.sided", mu=mu_0_sleep)
hours_of_sleep = c(7.2,8.7,5.4,6.1,5.6,6.7,5.9,6.3,7,4.2)
mu_0_sleep = 6
# Two-sided Z-test for H_0 = {\mu = \mu_0}, H_1 = {\mu \not= \mu_0}
t_test_1_sleep = t.test(hours_of_sleep, alternative="two.sided", mu=mu_0_sleep)
t_test_1_sleep
n_s = 15
mu_s = -.1
x_s = rnorm(n_s,mu_s,sigma)
f_test = var.test(x,x_s)
f_test
t_test_two_samples = t.test(x,x_s,alternative="two.sided",var.equal=T)
t_test_two_samples
# Your code here
f_test = var.test(grades_imi,grades_segf)
f_test
# Your code here
t_test_two_samples = t.test(x,x_s,alternative="two.sided",var.equal=T)
t_test_two_samples
# Your code here
t_test_two_samples_garde_1 = t.test(grades_imi,grades_segf,alternative="two.sided",var.equal=T)
t_test_two_samples_grade_1
# Your code here
t_test_two_samples_grade_1 = t.test(grades_imi,grades_segf,alternative="two.sided",var.equal=T)
t_test_two_samples_grade_1
t_test_two_samples_grade_2 = t.test(grades_imi,grades_segf,alternative="two.sided",var.equal=F)
t_test_two_samples_grade_2
# Your code here
expect_gaussian(grades_imi)
# Load the mtcars dataset
data(mtcars)
mtcars
# Summary of the regression model
pnorm(qnorm(0.95)-25*log(1.5))
# Summary of the regression model
pnorm(qnorm(0.05)-25*log(1.5))
library(ggplot2)        # plotting & data
library(dplyr)          # data manipulation
library(tidyr)          # data re-shaping
library(magrittr)       # pipe operator
library(gridExtra)      # provides side-by-side plotting
head(midwest)
f=midwest
View(f)
p1 <- ggplot(midwest, aes(percollege)) +
geom_histogram(fill = "white", color = "grey30")
p2 <- ggplot(midwest, aes(percollege)) +
geom_histogram(fill = "white", color = "grey30") +
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)        # plotting & data
library(dplyr)          # data manipulation
library(tidyr)          # data re-shaping
library(magrittr)       # pipe operator
library(gridExtra)
df <- midwest %>%
filter(state == "OH" | state == "MI") %>%
select(state, percollege)
View(df)
chisq.test(df)
chisq.test(df)
?chisq.test
chisq.test(df)
chisq.test(df%>% filter(state == "MI") %>% .$percollege, df%>% filter(state == "HO") %>% .$percollege)
chisq.test(df%>% filter(state == "MI") %>% .$percollege, df%>% filter(state == "HO") %>% .$percollege, rescale.p =  TRUE)
library(zoo)
library(RSQLite)
setwd("C:/Users/33782/OneDrive/Documents/ProjetIMI")
conn <- dbConnect(RSQLite::SQLite(), "time_series_energy_60min.sqlite3")
#
dbListTables(conn)
time_series_60min <- dbGetQuery(conn, "SELECT * FROM  time_series_60min_singleindex")
# summary(time_series_60min)
dbDisconnect(conn)
df_test<-time_series_60min
df_test$utc_timestamp <- as.POSIXct(time_series_60min$utc_timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
df_test$week_index <- format(df_test$utc_timestamp, "%U")
df_test$Year <- format(df_test$utc_timestamp, format = "%Y", tz = "UTC")
View(df_test)
DE_year <- as.numeric(df_test$Year[1:43800])
library(zoo)
library(RSQLite)
setwd("C:/Users/33782/OneDrive/Documents/ProjetIMI")
conn <- dbConnect(RSQLite::SQLite(), "time_series_energy_60min.sqlite3")
#
dbListTables(conn)
time_series_60min <- dbGetQuery(conn, "SELECT * FROM  time_series_60min_singleindex")
# summary(time_series_60min)
dbDisconnect(conn)
DE_solar_profile = time_series_60min$DE_solar_profile
DE_solar_capacity = time_series_60min$DE_solar_capacity
DE_wind_profile = time_series_60min$DE_wind_profile
DE_wind_capacity = time_series_60min$DE_wind_capacity
DE_solar_generation_product <- DE_solar_capacity*DE_solar_profile
DE_wind_generation_product <- DE_wind_capacity*DE_wind_profile
DE_solar_actual_consumption <- time_series_60min$DE_solar_generation_actual
DE_wind_actual_consumption <- time_series_60min$DE_wind_generation_actual
par(mfrow=c(2,2))
relative_error_solar <- abs(DE_solar_generation_product -DE_solar_actual_consumption)/DE_solar_actual_consumption
zeros_index_solar <- which(DE_solar_generation_product -DE_solar_actual_consumption==0)
relative_error_solar[zeros_index_solar] <- relative_error_solar[zeros_index_solar]*0
relative_error_wind <- abs(DE_wind_generation_product -DE_wind_actual_consumption)/DE_wind_actual_consumption
zeros_index_wind <- which(DE_wind_generation_product -DE_wind_actual_consumption==0)
relative_error_wind[zeros_index_wind] <- relative_error_wind[zeros_index_wind]*0
hist(relative_error_solar)
hist(relative_error_wind)
n_one <- which(relative_error==1)
n_two <- which(DE_solar_actual_consumption==0)
hist(abs(DE_solar_generation_product -DE_solar_actual_consumption)/DE_solar_actual_consumption)
DE_averaged_solar_capacity <- mean(DE_solar_capacity,na.rm = TRUE)
DE_averaged_wind_capacity  <- mean(DE_wind_capacity,na.rm = TRUE)
DE_solar_generation_product_fixed <- DE_averaged_solar_capacity*DE_solar_profile
relative_error_fixed_solar <-abs(DE_solar_generation_product_fixed -DE_solar_actual_consumption)/DE_solar_actual_consumption
zeros_index_fixed_solar = which(DE_solar_generation_product_fixed -DE_solar_actual_consumption==0)
relative_error_fixed_solar[zeros_index_fixed_solar] = relative_error_fixed_solar[zeros_index_fixed_solar]*0
DE_wind_generation_product_fixed <- DE_averaged_wind_capacity*DE_wind_profile
relative_error_fixed_wind <-abs(DE_wind_generation_product_fixed -DE_wind_actual_consumption)/DE_wind_actual_consumption
zeros_index_fixed_wind = which(DE_wind_generation_product_fixed -DE_wind_actual_consumption==0)
relative_error_fixed_wind[zeros_index_fixed_wind] = relative_error_fixed_wind[zeros_index_fixed_wind]*0
hist(relative_error_fixed_solar)
hist(relative_error_fixed_wind)
plot(DE_solar_capacity)
plot(DE_wind_capacity)
plot(DE_solar_profile)
plot(DE_wind_profile)
mean_solar_capacity = mean(DE_solar_capacity,na.rm = TRUE)
mean_wind_capacity = mean(DE_wind_capacity,na.rm = TRUE)
DE_solar_generation_product = mean_solar_capacity*DE_solar_profile
DE_wind_generation_product = mean_wind_capacity*DE_wind_profile
plot(DE_solar_generation_product)
plot(DE_wind_generation_product)
df_test<-time_series_60min
df_test$utc_timestamp <- as.POSIXct(time_series_60min$utc_timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
df_test$week_index <- format(df_test$utc_timestamp, "%U")
test_time <-read.zoo(df_test)
test_time$week_index <- as.numeric(test_time$week_index)
plot(test_time$week_index,type = "o", ylim = c(0,57), main="Week index distribution over time")
#Here we do the transformation of the price column of Germany
na_indices_DE_Price <- which(is.na(df$DE_LU_price_day_ahead[1:43800]))
test_time$DE_LU_price_day_ahead[na_indices_DE_Price]<- test_time$AT_price_day_ahead[na_indices_DE_Price]
DE_price_mix <- df$DE_LU_price_day_ahead
DE_price_mix[na_indices_DE_Price]<- df$AT_price_day_ahead[na_indices_DE_Price]
#Now to know which week present missing values:
na_indices_DE_Price_after_mix <- which(is.na(test_time$DE_LU_price_day_ahead))
na_indices_DE_solar_profile <- which(is.na(test_time$DE_solar_profile))
na_indices_DE_wind_profile <- which(is.na(test_time$DE_wind_profile))
na_indices_DE
na_indices_DE <- unique(c(na_indices_DE_Price_after_mix, na_indices_DE_solar_profile, na_indices_DE_wind_profile))
plot(na_indices_DE, main="index of raws with missing values")
lines(na_indices_DE_Price_after_mix, col ="blue")
lines(na_indices_DE_solar_profile, col ="green")
lines(na_indices_DE_wind_profile, col ="red")
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
test_time <- test_time[1:43800]
na_indices_DE_Price_after_mix_2 <- which(is.na(test_time$DE_LU_price_day_ahead))
na_indices_DE_solar_profile_2 <- which(is.na(test_time$DE_solar_profile))
na_indices_DE_wind_profile_2 <- which(is.na(test_time$DE_wind_profile))
na_indices_DE_2 <- unique(c(na_indices_DE_Price_after_mix_2, na_indices_DE_solar_profile_2, na_indices_DE_wind_profile_2))
solar_test <- match(na_indices_DE_solar_profile_2, na_indices_DE_2)
wind_test <- match(na_indices_DE_wind_profile_2, na_indices_DE_2)
plot(na_indices_DE_2, main="index of raws with missing values restricted period")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(x= solar_test, y = na_indices_DE_solar_profile_2, col ="green",lwd = 2)
lines(x = wind_test, y = na_indices_DE_wind_profile_2, col ="red")
legend(x = "topright", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
test_time$DE_LU_price_day_ahead
test_week <-unique(test_time$week_index[na_indices_DE_2])
test_week <-sort(as.numeric(test_week))
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(test_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks without NA")
x<- seq(1:5000)
for (i in 1:(length(na_indices_DE_2)-1)) {
rect(min(x), test_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
testtest <-diff(test_week)
testtest <- testtest-1
tegt <- sort(testtest)
plot(tegt)
axis(2, at=tegt, labels=tegt)
tegt
#Interpolation of the missing values
df_test$MonthDayHour <- format(df_test$utc_timestamp, format = "%m-%dT%H:%M:%S", tz = "UTC")
df_test$Year <- format(df_test$utc_timestamp, format = "%Y", tz = "UTC")
date_solar_profile_NA <- df_test$MonthDayHour[na_indices_DE_solar_profile_2]
DE_solar_profile <- df$DE_solar_profile[1:43800]
for (i in 1:length(date_solar_profile_NA)){
date <- date_solar_profile_NA[i]
index_date <- which(df_test$MonthDayHour == date)
solar_value <- DE_solar_profile[index_date]
test_time$DE_solar_profile[na_indices_DE_solar_profile_2[i]] <- mean(solar_value,na.rm = TRUE)
}
date_wind_profile_NA <- df_test$MonthDayHour[na_indices_DE_wind_profile_2]
DE_wind_profile <- df$DE_wind_profile[1:43800]
for (i in 1:length(date_wind_profile_NA)){
date <- date_wind_profile_NA[i]
index_date <- which(df_test$MonthDayHour == date)
wind_value <- DE_wind_profile[index_date]
test_time$DE_wind_profile[na_indices_DE_wind_profile_2[i]] <- mean(wind_value,na.rm = TRUE)
}
date_price_NA <- df_test$MonthDayHour[na_indices_DE_Price_after_mix_2]
DE_price <- DE_price #see above
for (i in 1:length(date_price_NA)){
date <- date_price_NA[i]
index_date <- which(df_test$MonthDayHour == date)
price_value <- DE_price[index_date]
test_time$DE_LU_price_day_ahead[na_indices_DE_Price_after_mix_2[i]] <- mean(price_value,na.rm = TRUE)
}
which(is.na(test_time$DE_LU_price_day_ahead))
which(is.na(test_time$DE_wind_profile))
which(is.na(test_time$DE_solar_profile))
DE_price <- as.numeric(as.data.frame(test_time$DE_LU_price_day_ahead)$"test_time$DE_LU_price_day_ahead")
DE_wind_profile <- as.numeric(as.data.frame(test_time$DE_wind_profile)$"test_time$DE_wind_profile")
DE_solar_profile <- as.numeric(as.data.frame(test_time$DE_solar_profile)$"test_time$DE_solar_profile")
DE_week_index <- as.numeric(df$week_index[1:43800])
DE_price_with_NA <- as.numeric(DE_price_mix[1:43800])
DE_wind_profile_with_NA <- as.numeric(df$DE_wind_profile[1:43800])
DE_solar_profile_with_NA <- as.numeric(df$DE_solar_profile[1:43800])
DE_year <- as.numeric(df_test$Year[1:43800])
DE_data <- cbind(utc_timestamp = time_series_60min$utc_timestamp[1:43800], DE_week_index = DE_week_index, DE_price = DE_price, DE_solar_profile = DE_solar_profile, DE_wind_profile =DE_wind_profile, DE_price_with_NA =DE_price_with_NA, DE_solar_profile_with_NA = DE_solar_profile_with_NA, DE_wind_profile_with_NA = DE_wind_profile_with_NA)
con <- dbConnect(RSQLite::SQLite(), dbname = "DE_data.sqlite")
DE_data <- as.data.frame(DE_data)
# Write the dataframe to the database
# dbWriteTable(con, "DE_data", DE_data)
#
# # Close the connection
# dbDisconnect(con)
#conn <- dbConnect(RSQLite::SQLite(), "time_series_energy_60min.sqlite3")
conn <- dbConnect(RSQLite::SQLite(), "DE_data.sqlite")
dbListTables(conn)
time_series_60min <- dbGetQuery(conn, "SELECT * FROM  DE_data")
View(time_series_60min)
DE_data <- dbGetQuery(conn, "SELECT * FROM  DE_data")
# summary(time_series_60min)
dbDisconnect(conn)
conn <- dbConnect(RSQLite::SQLite(), "time_series_energy_60min.sqlite3")
dbListTables(conn)
time_series_60min <- dbGetQuery(conn, "SELECT * FROM  time_series_60min_singleindex")
dbDisconnect
# summary(time_series_60min)
dbDisconnect(conn)
df_test<-time_series_60min
df_test$Year <- format(df_test$utc_timestamp, format = "%Y", tz = "UTC")
DE_year <- as.numeric(df_test$Year[1:43800])
df_test$Year <- format(df_test$utc_timestamp, format = "%Y", tz = "UTC")
View(df_test)
df_test$MonthDayHour <- format(df_test$utc_timestamp, format = "%m-%dT%H:%M:%S", tz = "UTC")
df_test$Year <- format(df_test$utc_timestamp, format = "%Y", tz = "UTC")
df_test<-time_series_60min
df_test$utc_timestamp <- as.POSIXct(time_series_60min$utc_timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
df_test$Year <- format(df_test$utc_timestamp, format = "%Y", tz = "UTC")
DE_year <- as.numeric(df_test$Year[1:43800])
Test <- cbind(DE_data,DE_year = DE_year )
View(Test)
View(Test)
#Write the dataframe to the database
dbWriteTable(con, "DE_data", Test)
con <- dbConnect(RSQLite::SQLite(), dbname = "DE_data.sqlite")
Test<- as.data.frame(Test)
View(Test)
#Write the dataframe to the database
dbWriteTable(con, "DE_data", Test)
#Write the dataframe to the database
dbWriteTable(con, "DE_data", Test, overwrite = TRUE)
# Close the connection
dbDisconnect(con)
