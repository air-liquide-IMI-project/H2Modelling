lines(x,w3, col = 5)
x<- seq(-20,20, length= 1000)
y= dnorm(x)
w= dt(x, df =1)
w2=dt (x, df = 5)
w3 = dt(x, df =10)
plot(x,y)
lines(x,w)
lines(x,w2, col = 4)
lines(x,w3, col = 5)
?dnorm
x<- seq(-10,10, length= 1000)
y= dnorm(x)
w= dt(x, df =1)
w2=dt (x, df = 5)
w3 = dt(x, df =10)
plot(x,y)
lines(x,w)
lines(x,w2, col = 4)
lines(x,w3, col = 8)
?dnorm
x<- seq(-5,5, length= 1000)
y= dnorm(x)
w= dt(x, df =1)
w2=dt (x, df = 5)
w3 = dt(x, df =10)
plot(x,y)
lines(x,w)
lines(x,w2, col = 4)
lines(x,w3, col = 8)
?lines
rm(list=ls())
n = 30
mu = 0
sigma = 1
x = rnorm(n,mean=mu,sd=sigma)
mu_0 = .2
p_val = 2*(1-pnorm(sqrt(n/sigma^2)*abs(mean(x)-mu_0)))
p_val
?pchisq
sigma_0 = .8
alpha = 0.05
q_alpha = qchisq(p = 1-alpha, df = n-1)
Value_chi_2 = 1/sigma_0^2*var(x)
# Your code here
mu_0 = .01
# Two-sided Z-test for H_0 = {\mu = \mu_0}, H_1 = {\mu \not= \mu_0}
t_test_1 = t.test(x, alternative="two.sided", mu=mu_0)
t_test_1
print(t_test_1$p.value)
# H_1 = {\mu < \mu_0}
t_test_2 = t.test(x, alternative="less", mu=mu_0)
print(t_test_2$p.value)
# H_1 = {\mu > \mu_0}
t_test_3 = t.test(x, alternative="greater", mu=mu_0)
print(t_test_3$p.value)
# First funny identity
t_test_2$p.value / t_test_1$p.value
# Second funny identity
t_test_2$p.value + t_test_3$p.value
heart_rates = c(80,74,73,72,78,75,70,74,69)
hours_of_sleep = c(7.2,8.7,5.4,6.1,5.6,6.7,5.9,6.3,7,4.2)
n_s = 15
mu_s = -.1
x_s = rnorm(n_s,mu_s,sigma)
f_test = var.test(x,x_s)
f_test
t_test_two_samples = t.test(x,x_s,alternative="two.sided",var.equal=T)
t_test_two_samples
grades_imi = c(8.5,10,10,10,11,11.5,11.5,12,12,12,
12,12.5,12.5,12.5,12.5,13,13,13,13,13,
13,13,13,13.5,14,14,14,14,14,14,
14.5,14.5,14.5,15,15,15.5,15.5,15.5,15.5,15.5,
16,16,16,16,16,16,16.5,16.5,16.5,16.5,
18.5,18.5,19,19)
grades_segf = c(3.5,10,10,10.5,10.5,11,11,11,11.5,11.5,
12.5,12.5,13.5,13.5,13.5,14,14.5,15,15.5,15.5,
15.5,16,16.5,17,17,17.5)
print(mean(grades_imi))
print(mean(grades_segf))
print(sd(grades_imi))
print(sd(grades_segf))
# Your code here
# Your code here
# Your code here
# Load the mtcars dataset
data(mtcars)
mtcars
# Fit linear regression model
model = lm(qsec ~ mpg + hp, data = mtcars)
# Summary of the regression model
summary(model)
heart_rates = c(80,74,73,72,78,75,70,74,69)
pvalue_heart = 1-pnorm(mean(heart_rates), mean = 71, sd = 4)
heart_rates = c(80,74,73,72,78,75,70,74,69)
pvalue_heart = 1-pnorm(mean(heart_rates), mean = 71, sd = 4/9)
hours_of_sleep = c(7.2,8.7,5.4,6.1,5.6,6.7,5.9,6.3,7,4.2)
mu_0_sleep = 6
# Two-sided Z-test for H_0 = {\mu = \mu_0}, H_1 = {\mu \not= \mu_0}
t_test_1 = t.test(hours_of_sleep, alternative="two.sided", mu=mu_0_sleep)
hours_of_sleep = c(7.2,8.7,5.4,6.1,5.6,6.7,5.9,6.3,7,4.2)
mu_0_sleep = 6
# Two-sided Z-test for H_0 = {\mu = \mu_0}, H_1 = {\mu \not= \mu_0}
t_test_1_sleep = t.test(hours_of_sleep, alternative="two.sided", mu=mu_0_sleep)
t_test_1_sleep
n_s = 15
mu_s = -.1
x_s = rnorm(n_s,mu_s,sigma)
f_test = var.test(x,x_s)
f_test
t_test_two_samples = t.test(x,x_s,alternative="two.sided",var.equal=T)
t_test_two_samples
# Your code here
f_test = var.test(grades_imi,grades_segf)
f_test
# Your code here
t_test_two_samples = t.test(x,x_s,alternative="two.sided",var.equal=T)
t_test_two_samples
# Your code here
t_test_two_samples_garde_1 = t.test(grades_imi,grades_segf,alternative="two.sided",var.equal=T)
t_test_two_samples_grade_1
# Your code here
t_test_two_samples_grade_1 = t.test(grades_imi,grades_segf,alternative="two.sided",var.equal=T)
t_test_two_samples_grade_1
t_test_two_samples_grade_2 = t.test(grades_imi,grades_segf,alternative="two.sided",var.equal=F)
t_test_two_samples_grade_2
# Your code here
expect_gaussian(grades_imi)
# Load the mtcars dataset
data(mtcars)
mtcars
# Summary of the regression model
pnorm(qnorm(0.95)-25*log(1.5))
# Summary of the regression model
pnorm(qnorm(0.05)-25*log(1.5))
library(ggplot2)        # plotting & data
library(dplyr)          # data manipulation
library(tidyr)          # data re-shaping
library(magrittr)       # pipe operator
library(gridExtra)      # provides side-by-side plotting
head(midwest)
f=midwest
View(f)
p1 <- ggplot(midwest, aes(percollege)) +
geom_histogram(fill = "white", color = "grey30")
p2 <- ggplot(midwest, aes(percollege)) +
geom_histogram(fill = "white", color = "grey30") +
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)        # plotting & data
library(dplyr)          # data manipulation
library(tidyr)          # data re-shaping
library(magrittr)       # pipe operator
library(gridExtra)
df <- midwest %>%
filter(state == "OH" | state == "MI") %>%
select(state, percollege)
View(df)
chisq.test(df)
chisq.test(df)
?chisq.test
chisq.test(df)
chisq.test(df%>% filter(state == "MI") %>% .$percollege, df%>% filter(state == "HO") %>% .$percollege)
chisq.test(df%>% filter(state == "MI") %>% .$percollege, df%>% filter(state == "HO") %>% .$percollege, rescale.p =  TRUE)
library(RSQLite)
setwd("C:/Users/33782/OneDrive/Documents/ProjetIMI")
conn <- dbConnect(RSQLite::SQLite(), "time_series_energy_60min.sqlite3")
#
dbListTables(conn)
time_series_60min <- dbGetQuery(conn, "SELECT * FROM  time_series_60min_singleindex")
# summary(time_series_60min)
dbDisconnect(conn)
DE_solar_profile = time_series_60min$DE_solar_profile
DE_solar_capacity = time_series_60min$DE_solar_capacity
DE_wind_profile = time_series_60min$DE_wind_profile
DE_wind_capacity = time_series_60min$DE_wind_capacity
DE_solar_generation_product = DE_solar_capacity*DE_solar_profile
DE_solar_actual_consumption = time_series_60min$DE_solar_generation_actual
zeros_index = which(DE_solar_generation_product -DE_solar_actual_consumption==0)
relative_error[zeros_index] = relative_error[zeros_index]*0
relative_error = abs(DE_solar_generation_product -DE_solar_actual_consumption)/DE_solar_actual_consumption
zeros_index = which(DE_solar_generation_product -DE_solar_actual_consumption==0)
relative_error[zeros_index] = relative_error[zeros_index]*0
plot(relative_error)
n_one = which(relative_error==1)
n_two = which(DE_solar_actual_consumption==0)
ngamma = which(n_one==ntwo)
ngamma = which(n_one==n_two)
282 in n_one
which(n_two == 282)
which(n_two == 608)
hist(abs(DE_solar_generation_product -DE_solar_actual_consumption)/DE_solar_actual_consumption)
DE_averaged_solar_capacity <- mean(DE_solar_capacity,na.rm = TRUE)
DE_solar_generation_product_fixed <- DE_averaged_solar_capacity*DE_solar_profile
relative_error_fixed <-abs(DE_solar_generation_product_fixed -DE_solar_actual_consumption)/DE_solar_actual_consumption
zeros_index_fixed = which(DE_solar_generation_product_fixed -DE_solar_actual_consumption==0)
relative_error_fixed[zeros_index_fixed] = relative_error_fixed[zeros_index_fixed]*0
hist(relative_error_fixed)
DE_averaged_wind_capacity  <- mean(DE_wind_capacity,na.rm = TRUE)
DE_wind_generation_product <- DE_wind_capacity*DE_wind_profile
DE_wind_generation_actual
DE_wind_actual_consumption <- time_series_60min$DE_wind_generation_actual
relative_error_wind <- abs(DE_wind_generation_product -DE_wind_actual_consumption)/DE_wind_actual_consumption
zeros_index_wind <- which(DE_wind_generation_product -DE_wind_actual_consumption==0)
relative_error_wind[zeros_index_wind] <- relative_error_wind[zeros_index_wind]*0
hist(relative_error_wind)
DE_wind_generation_product_fixed <- DE_wind_capacity*DE_wind_profile
relative_error_fixed_wind <-abs(DE_wind_generation_product_fixed -DE_wind_actual_consumption)/DE_wind_actual_consumption
zeros_index_fixed_wind = which(DE_wind_generation_product_fixed -DE_wind_actual_consumption==0)
relative_error_fixed_wind[zeros_index_fixed_wind] = relative_error_fixed_wind[zeros_index_fixed_wind]*0
hist(relative_error_fixed_wind)
DE_wind_generation_product_fixed <- DE_averaged_wind_capacity*DE_wind_profile
relative_error_fixed_wind <-abs(DE_wind_generation_product_fixed -DE_wind_actual_consumption)/DE_wind_actual_consumption
zeros_index_fixed_wind = which(DE_wind_generation_product_fixed -DE_wind_actual_consumption==0)
relative_error_fixed_wind[zeros_index_fixed_wind] = relative_error_fixed_wind[zeros_index_fixed_wind]*0
hist(relative_error_fixed_wind)
plot(df$week_index)
df$week_index <- format(df$utc_timestamp, "%U")
plot(df$week_index)
df$week_index <- format(df$utc_timestamp, "%U")
df<-time_series_60min
df$utc_timestamp <- as.POSIXct(df$utc_timestamp, format="%Y-%m-%dT%H:%M:%S")
df$week_index <- format(df$utc_timestamp, "%U")
plot(df$week_index)
plot(df$week_index,main="Week index distributon over time")
plot(df$week_index,main="Week index distribution over time")
df_test<-time_series_60min
df_test$utc_timestamp <- as.POSIXct(time_series_60min$utc_timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
test_time <-read.zoo(df_test)
library(zoo)
test_time <-read.zoo(df_test)
test_time <-read.zoo(df)
df_test$week_index <- format(df_test$utc_timestamp, "%U")
View(df_test)
test_time <-read.zoo(df_test)
plot(test_time$week_index)
plot(test_time$week_index)
test_time$week_index
plot(test_time$week_index)
plot(as.numerci(test_time$week_index))
plot(as.numeric(test_time$week_index))
test_time$week_index <- as.numeric(test_time$week_index)
plot(test_time$week_index)
which(is.na(test_time$week_index))
gamma <- unique(test_time$week_index)
gamma
test_time$week_index
test_time$week_index <- as.numeric(test_time$week_index)
gamma <- unique(test_time$week_index)
gamma
plot(test_time$week_index)
gamma <- unique(test_time$week_index[1:6777])
gamma
plot(test_time$week_index[1:6777])
plot(test_time)
which(is.na(df_test$utc_timestamp))
which(is.na(test_time$week_index))
sum(is.na(test_time$week_index))
sum(is.na(df_test$utc_timestamp))
plot(test_time[,5])
plot(test_time[3,])
hist(test_time$week_index)
plot(test_time[,1:2])
hist(test_time$week_index, ylim = c(0,57))
plot(test_time$week_index, ylim = c(0,57))
plot(test_time$week_index,type = "o", ylim = c(0,57))
plot(test_time$week_index,type = "o", ylim = c(0,57), main="Week index distribution over time")
na_indices_DE_Price <- which(is.na(test_time$DE_LU_price_day_ahead))
test_time$DE_LU_price_day_ahead[na_indices_DE_Price]<- test_time$AT_price_day_ahead[na_indices_DE_Price]
na_indices_DE_Price_after_mix <- which(is.na(test_time$DE_LU_price_day_ahead))
na_indices_DE_solar_profile <- which(is.na(test_time$DE_solar_profile))
na_indices_DE_wind_profile <- which(is.na(test_time$DE_wind_profile))
na_indices_DE <- unique(c(na_indices_DE_Price_after_mix, na_indices_DE_solar_profile, na_indices_DE_wind_profile))
plot(na_indices_DE)
plot(na_indices_DE)
lines(na_indices_DE_Price_after_mix)
lines(na_indices_DE_Price_after_mix, col ="blue")
lines(na_indices_DE_solar_profile, col ="green")
lines(na_indices_DE_wind_profile, col ="red")
plot(na_indices_DE)
lines(na_indices_DE_Price_after_mix, col ="blue")
lines(na_indices_DE_solar_profile, col ="green")
lines(na_indices_DE_wind_profile, col ="red")
legend(x = "topright", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
plot(na_indices_DE)
lines(na_indices_DE_Price_after_mix, col ="blue")
lines(na_indices_DE_solar_profile, col ="green")
lines(na_indices_DE_wind_profile, col ="red")
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
plot(na_indices_DE, main="index of raws with missing values")
lines(na_indices_DE_Price_after_mix, col ="blue")
lines(na_indices_DE_solar_profile, col ="green")
lines(na_indices_DE_wind_profile, col ="red")
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
na_indices_DE_solar_profile
na_indices_DE
dftest_test <- test_time[1:43800]
test_time <- test_time[1:43800]
dftest_test<-0
na_indices_DE_Price_after_mix_2 <- which(is.na(test_time$DE_LU_price_day_ahead))
na_indices_DE_solar_profile_2 <- which(is.na(test_time$DE_solar_profile))
na_indices_DE_wind_profile_2 <- which(is.na(test_time$DE_wind_profile))
na_indices_DE_2 <- unique(c(na_indices_DE_Price_after_mix_2, na_indices_DE_solar_profile_2, na_indices_DE_wind_profile_2))
plot(na_indices_DE_2)
plot(na_indices_DE_2, main="index of raws with missing values 2")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(na_indices_DE_solar_profile_2, col ="green")
lines(na_indices_DE_wind_profile_2, col ="red")
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
na_indices_DE_solar_profile_2
solar_test <- which(na_indices_DE_2 == na_indices_DE_solar_profile_2)
solar_test <- match(na_indices_DE_solar_profile_2, na_indices_DE_2)
plot(na_indices_DE_2, main="index of raws with missing values 2")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(x= solar_test, y = na_indices_DE_solar_profile_2, col ="green")
lines(na_indices_DE_wind_profile_2, col ="red")
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
wind_test <- match(na_indices_DE_wind_profile_2, na_indices_DE_2)
plot(na_indices_DE_2, main="index of raws with missing values 2")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(x= solar_test, y = na_indices_DE_solar_profile_2, col ="green")
lines(x = wind_test, y = na_indices_DE_wind_profile_2, col ="red")
legend(x = "right", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
plot(na_indices_DE_2, main="index of raws with missing values 2")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(x= solar_test, y = na_indices_DE_solar_profile_2, col ="green")
lines(x = wind_test, y = na_indices_DE_wind_profile_2, col ="red")
legend(x = "topright", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
plot(na_indices_DE_2, main="index of raws with missing values 2")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(x= solar_test, y = na_indices_DE_solar_profile_2, col ="green",lwd = 2)
lines(x = wind_test, y = na_indices_DE_wind_profile_2, col ="red")
legend(x = "topright", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
plot(na_indices_DE_2, main="index of raws with missing values restricted period")
lines(na_indices_DE_Price_after_mix_2, col ="blue")
lines(x= solar_test, y = na_indices_DE_solar_profile_2, col ="green",lwd = 2)
lines(x = wind_test, y = na_indices_DE_wind_profile_2, col ="red")
legend(x = "topright", legend = c("DE_price", "DE_solar_profile","DE_wind_profile" ), lty = c(1, 1,1), col = c("blue", "green", "red"), lwd = 2)
test_time$DE_LU_price_day_ahead
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
gh<- c(test_week,test_week_2)
gh <-sort(as.numeric(unique(gh)))
plot(gh,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
for (i in 1:(length(gh)-1)) {
rect(min(x), gh[i], max(x), gh[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=gh, labels=gh)
test_week <-unique(test_time$week_index[na_indices_DE_2])
text_week <-sort(as.numeric(test_week))
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(text_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
x<- seq(1:length(na_indices_DE_2))
for (i in 1:(length(gh)-1)) {
rect(min(x), text_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=gh, labels=gh)
axis(2, at=gh, labels=test_week)
axis(2, at=test_week, labels=test_week)
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(text_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
x<- seq(1:length(na_indices_DE_2))
for (i in 1:(length(gh)-1)) {
rect(min(x), text_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
x<- seq(1:500)
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(text_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
x<- seq(1:500)
for (i in 1:(length(gh)-1)) {
rect(min(x), text_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
plot(text_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
x<- seq(1:length(na_indices_DE_2))
for (i in 1:(length(na_indices_DE_2)-1)) {
rect(min(x), text_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(text_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
x<- seq(1:5000)
for (i in 1:(length(na_indices_DE_2)-1)) {
rect(min(x), text_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
test_week <-sort(as.numeric(test_week))
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(test_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks withou NA")
x<- seq(1:5000)
for (i in 1:(length(na_indices_DE_2)-1)) {
rect(min(x), test_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
band_colors <- c("red", "green", "orange", "purple", "cyan", "yellow")
band_colors <-c(band_colors,band_colors)
plot(test_week,type="o", col="blue", xlab="Index", ylab="week index", main="Space between weeks without NA")
x<- seq(1:5000)
for (i in 1:(length(na_indices_DE_2)-1)) {
rect(min(x), test_week[i], max(x), test_week[i+1], col=band_colors[i], border=NA, alpha=0.2)
}
axis(2, at=test_week, labels=test_week)
testtest <-diff(test_week)
testtest <- testtest-1
tegt <- sort(testtest)
plot(tegt)
plot(tegt)
axis(2, at=tegt, labels=tegt)
tegt
date_solar_NA <- df_test$utc_timestamp[date_solar_NA]
date_solar_profile_NA <- df_test$utc_timestamp[na_indices_DE_solar_profile_2]
date_solar_profile_NA
test_time$MonthDayHour <- format(df_test$utc_timestamp, format = "%m-%dT%H:%M:%S", tz = "UTC")
df_test$MonthDayHour <- format(df_test$utc_timestamp, format = "%m-%dT%H:%M:%S", tz = "UTC")
View(df_test)
date_solar_profile_NA <- df_test$MonthDayHour[na_indices_DE_solar_profile_2]
date_solar_profile_NA
DE_solar_profile <- df$DE_solar_profile[1:43800]
DE_solar_profile <- test_time$DE_solar_profile[1:43800]
df$DE_solar_profile
DE_solar_profile <- df$DE_solar_profile[1:43800]
for (i in 1:length(date_solar_profile_NA)){
date <- date_solar_profile_NA[i]
index_date <- which(df_test$MonthDayHour == date)
solar_value <- DE_solar_profile[index_date]
test_time$DE_solar_profile[na_indices_DE_solar_profile_2[i]] <- mean(solar_value,na.rm = TRUE)
}
hyu<- which(is.na(test_time$DE_solar_profile))
plot(test_time$DE_solar_profile)
date_wind_profile_NA <- df_test$MonthDayHour[na_indices_DE_wind_profile_2]
DE_wind_profile <- df$DE_wind_profile[1:43800]
for (i in 1:length(date_wind_profile_NA)){
date <- date_wind_profile_NA[i]
index_date <- which(df_test$MonthDayHour == date)
wind_value <- DE_wind_profile[index_date]
test_time$DE_wind_profile[na_indices_DE_wind_profile_2[i]] <- mean(wind_value,na.rm = TRUE)
}
date_price_NA <- df_test$MonthDayHour[na_indices_DE_Price_after_mix_2]
DE_price <- test_time$DE_LU_price_day_ahead[1:43800]
for (i in 1:length(date_price_NA)){
date <- date_price_NA[i]
index_date <- which(df_test$MonthDayHour == date)
price_value <- DE_price[index_date]
test_time$DE_LU_price_day_ahead[na_indices_DE_Price_after_mix_2[i]] <- mean(price_value,na.rm = TRUE)
}
warnings()
na_indices_DE_Price <- which(is.na(test_time$DE_LU_price_day_ahead))
test_time$DE_LU_price_day_ahead[na_indices_DE_Price]<- test_time$AT_price_day_ahead[na_indices_DE_Price]
na_indices_DE_Price <- which(is.na(df$DE_LU_price_day_ahead))
test_time$DE_LU_price_day_ahead[na_indices_DE_Price]<- test_time$AT_price_day_ahead[na_indices_DE_Price]
na_indices_DE_Price <- which(is.na(df$DE_LU_price_day_ahead))
na_indices_DE_Price <- which(is.na(df$DE_LU_price_day_ahead[1:43800]))
test_time$DE_LU_price_day_ahead[na_indices_DE_Price]<- test_time$AT_price_day_ahead[na_indices_DE_Price]
DE_price <- df$DE_LU_price_day_ahead
DE_price[na_indices_DE_Price]<- df$AT_price_day_ahead[na_indices_DE_Price]
DE_price <- DE_price #see above
for (i in 1:length(date_price_NA)){
date <- date_price_NA[i]
index_date <- which(df_test$MonthDayHour == date)
price_value <- DE_price[index_date]
test_time$DE_LU_price_day_ahead[na_indices_DE_Price_after_mix_2[i]] <- mean(price_value,na.rm = TRUE)
}
which(is.na(test_time$DE_LU_price_day_ahead))
which(is.na(test_time$DE_wind_profile))
which(is.na(test_time$DE_solar_profile
warnings()
which(is.na(test_time$DE_solar_profile))
DE_price <- as.data.frame(test_time$DE_LU_price_day_ahead)
View(DE_price)
DE_wind_profile <- as.data.frame(test_time$DE_wind_profile)
View(DE_wind_profile)
DE_price <- as.data.frame(test_time$DE_LU_price_day_ahead)$test_time$DE_LU_price_day_ahead
DE_price <- as.data.frame(test_time$DE_LU_price_day_ahead)$(test_time$DE_LU_price_day_ahead)
DE_price <- as.data.frame(test_time$DE_LU_price_day_ahead)$"test_time$DE_LU_price_day_ahead"
DE_price <- as.numeric(as.data.frame(test_time$DE_LU_price_day_ahead)$"test_time$DE_LU_price_day_ahead")
DE_wind_profile <- as.numeric(as.data.frame(test_time$DE_wind_profile)$"test_time$DE_wind_profile")
DE_solar_profile <- as.numeric(as.data.frame(test_time$DE_solar_profile)$"test_time$DE_solar_profile")
DE_week_index <- df$week_index[1:43800]
DE_week_index <- as.numeric(df$week_index[1:43800])
DE_price_mix <- df$DE_LU_price_day_ahead
DE_price_mix[na_indices_DE_Price]<- df$AT_price_day_ahead[na_indices_DE_Price]
DE_price_with_NA <- as.numeric(DE_price_mix[1:43800])
DE_wind_profile_with_NA <- as.numeric(df$DE_wind_profile[1:43800])
DE_solar_profile_with_NA <- as.numeric(df$DE_solar_profile[1:43800])
DE_data <- cbind(utc_timestamp = time_series_60min$utc_timestamp, DE_week_index = DE_week_index,
DE_price = DE_price, DE_solar_profile = DE_solar_profile, DE_wind_profile =DE_wind_profile
DE_price_with_NA =DE_price_with_NA, DE_solar_profile_with_NA = DE_solar_profile_with_NA
DE_wind_profile_with_NA = DE_wind_profile_with_NA)
DE_data <- cbind(utc_timestamp = time_series_60min$utc_timestamp, DE_week_index = DE_week_index,
+DE_price = DE_price, DE_solar_profile = DE_solar_profile, DE_wind_profile =DE_wind_profile
+DE_price_with_NA =DE_price_with_NA, DE_solar_profile_with_NA = DE_solar_profile_with_NA
+DE_wind_profile_with_NA = DE_wind_profile_with_NA)
DE_data <- cbind(utc_timestamp = time_series_60min$utc_timestamp, DE_week_index = DE_week_index, DE_price = DE_price, DE_solar_profile = DE_solar_profile, DE_wind_profile =DE_wind_profile, DE_price_with_NA =DE_price_with_NA, DE_solar_profile_with_NA = DE_solar_profile_with_NA, DE_wind_profile_with_NA = DE_wind_profile_with_NA)
View(DE_data)
DE_data <- cbind(utc_timestamp = time_series_60min$utc_timestamp[1:43800], DE_week_index = DE_week_index, DE_price = DE_price, DE_solar_profile = DE_solar_profile, DE_wind_profile =DE_wind_profile, DE_price_with_NA =DE_price_with_NA, DE_solar_profile_with_NA = DE_solar_profile_with_NA, DE_wind_profile_with_NA = DE_wind_profile_with_NA)
View(DE_data)
con <- dbConnect(RSQLite::SQLite(), dbname = "DE_data.sqlite")
# Write the dataframe to the database
dbWriteTable(con, "DE_data", DE_Data)
# Write the dataframe to the database
dbWriteTable(con, "DE_data", DE_data)
DE_data <- as.data.frame(DE_data)
View(DE_data)
# Write the dataframe to the database
dbWriteTable(con, "DE_data", DE_data)
